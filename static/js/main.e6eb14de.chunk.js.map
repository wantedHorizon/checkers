{"version":3,"sources":["utils.js","components/ReactCheckers.js","components/Board.js","components/Opponent.js","containers/Game.js","index.js"],"names":["isOdd","n","Math","abs","getColAsInt","columns","coordinate","charAt","getColAsAlph","columnInt","key","hasOwnProperty","getRowAsInt","parseInt","returnPlayerName","playerBool","ReactCheckers","this","coordinates","col","utils","row","columnLeft","columnRight","rowUpper","rowLower","corners","leftUpper","rightUpper","leftLower","rightLower","boardState","isKing","hasJumped","movesOut","moves","jumps","killJumps","getCorners","player","advanceRow","cornerCoordinates","indexOf","push","neighborPiece","opponentCorners","potentialJump","concat","killJumpsOut","length","state","currentState","Object","assign","history","stepNumber","movingPiece","activePiece","jumpArray","jumpKills","shouldKing","object","value","newMoves","setCurrentPlayer","setActivePiece","keys","find","getMoves","currentPlayer","stateOut","winner","evaluateWinner","player1Pieces","player1Moves","player2Pieces","player2Moves","moveCount","Square","props","squareClasses","onClick","className","Board","options","scale","max","boardRender","columnsRender","colorClass","moveClass","join","renderSquare","reverse","React","Component","Opponent","computerMoves","currentSquare","pieceMoves","getComputerMoves","moveKeys","superMoves","m","piece","movesData","jumpMoves","jumpCoordinates","highestScore","bestMove","a","moveTo","score","stateLeaf","newJumpMoves","finalMove","highestAllMoves","pieces","pieceMove","moveScore","chooseMove","floor","random","out","randomPiece","randomMoveTo","browserHistory","createBrowserHistory","particlesOptions","particles","number","density","enable","value_area","Game","setColumns","players","createBoard","future","board","initPlayers","self","forEach","i","createPiece","location","slice","getCurrentState","clickedSquare","postMoveState","movePiece","updateStatePostMove","computerTurn","setState","setTimeout","computerMove","getSmartMove","backStep","futureMoves","unsetHistory","move","pop","his","gameStatus","stateHistory","undoClass","redoClass","params","Router","basename","setPlayers","handleClick","mainMenu","reset","undo","redo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6eb14de.chunk.js","sourcesContent":["export function isOdd(n) {\n    return Math.abs(n % 2) === 1;\n}\n\nexport function getKeyByValue(object, value) {\n    return Object.keys(object).find(key => object[key] === value);\n}\n\nexport function getColAsInt(columns, coordinate) {\n    return columns[coordinate.charAt(0)];\n}\n\nexport function getColAsAlph(columns, columnInt) {\n\n    for (let key in columns) {\n        if (!columns.hasOwnProperty(key)) {\n            continue;\n        }\n\n        if (columnInt === columns[key]) {\n            return key;\n        }\n    }\n\n    return false;\n}\n\nexport function getRowAsInt(coordinate) {\n    return parseInt(coordinate.charAt(1), 10);\n}\n\nexport function returnPlayerName(playerBool) {\n    return playerBool === true ? 'player1' : 'player2';\n}","import * as utils from '../utils.js';\n\nexport class ReactCheckers {\n\n    constructor(columns) {\n        this.columns = columns;\n    }\n\n    getCorners(coordinates) {\n\n        const col = utils.getColAsInt(this.columns, coordinates);\n        const row = utils.getRowAsInt(coordinates);\n\n        const columnLeft  = col -1 >= 0 ? utils.getColAsAlph(this.columns, col - 1) : false;\n        const columnRight = col +1 <= 7 ? utils.getColAsAlph(this.columns, col + 1) : false;\n\n        const rowUpper = row +1 < 9 ? row +1 : false;\n        const rowLower = row -1 > 0 ? row -1 : false;\n\n        let corners = {};\n\n        corners.leftUpper  = columnLeft  !== false && rowUpper !== false ? columnLeft  + rowUpper : null;\n        corners.rightUpper = columnRight !== false && rowUpper !== false ? columnRight + rowUpper : null;\n        corners.leftLower  = columnLeft  !== false && rowLower !== false ? columnLeft  + rowLower : null;\n        corners.rightLower = columnRight !== false && rowLower !== false ? columnRight + rowLower : null;\n\n        return corners;\n    }\n\n    getMoves(boardState, coordinates, isKing = false, hasJumped = false) {\n\n        if (boardState[coordinates] === null) {\n            return [];\n        }\n\n        let moves = [];\n        let jumps = [];\n\n        let killJumps = {};\n\n        const corners = this.getCorners(coordinates);\n\n        const row = utils.getRowAsInt(coordinates);\n        const player = boardState[coordinates].player;\n\n        const advanceRow = player === 'player1' ? row - 1 : row + 1;\n\n        for (let key in corners) {\n            if (!corners.hasOwnProperty(key)) {\n                continue;\n            }\n\n            let cornerCoordinates = corners[key];\n\n            if (cornerCoordinates === null) {\n                continue;\n            }\n\n            if (!isKing && cornerCoordinates.indexOf(advanceRow) < 0) {\n                continue;\n            }\n\n            if (boardState[cornerCoordinates] === null) {\n                moves.push(cornerCoordinates);\n            } else {\n                let neighborPiece = boardState[cornerCoordinates];\n\n                if (neighborPiece.player === player) {\n                    continue;\n                }\n\n                let opponentCorners = this.getCorners(cornerCoordinates);\n                let potentialJump = opponentCorners[key];\n\n                if (boardState[potentialJump] === null) {\n                    killJumps[cornerCoordinates] = potentialJump;\n                    jumps.push(potentialJump);\n                }\n            }\n        }\n\n        let movesOut;\n\n        if (hasJumped === false) {\n            movesOut = moves.concat(jumps);\n        } else {\n            // If the piece has already jumped, only additional jumps are available\n            movesOut = jumps;\n        }\n\n        let killJumpsOut = jumps.length > 0 ? killJumps : null;\n\n        return [movesOut, killJumpsOut];\n\n    }\n\n    movePiece(coordinates, state) {\n        let currentState  = Object.assign({}, state.history[state.stepNumber]);\n        let boardState = Object.assign({}, currentState.boardState);\n        let movingPiece = Object.assign({}, boardState[state.activePiece]);\n\n        let jumpArray = [];\n\n        for (let key in state.jumpKills) {\n            if (!state.jumpKills.hasOwnProperty(key)) {\n                continue;\n            }\n\n            jumpArray.push(state.jumpKills[key]);\n        }\n\n        // Don't move if the coordinates don't match a moveable or jumpable square.\n        if (state.moves.indexOf(coordinates) < 0 && jumpArray.indexOf(coordinates) < 0) {\n            return null;\n        }\n\n        // King me maybe?\n        if (this.shouldKing(movingPiece, coordinates)) {\n            movingPiece.isKing = true;\n        }\n\n        // Move piece to new coordinates\n        boardState[state.activePiece] = null;\n        boardState[coordinates] = movingPiece;\n\n        // Remove opponent piece if jump is made\n        const player = movingPiece.player;\n        let hasJumped = null;\n        let newMoves = [];\n        let setCurrentPlayer = player === 'player2';\n        let setActivePiece = null;\n\n        if (jumpArray.indexOf(coordinates) > -1) {\n            let opponentPosition = utils.getKeyByValue(state.jumpKills, coordinates);\n            boardState[opponentPosition] = null;\n\n            newMoves = this.getMoves(boardState, coordinates, movingPiece.isKing, true);\n\n            if (newMoves[0].length > 0) {\n                hasJumped = true;\n                setCurrentPlayer = currentState.currentPlayer;\n                setActivePiece = coordinates;\n            } else {\n                hasJumped = null;\n            }\n        }\n\n        if (hasJumped === true) {\n            if (newMoves[0].length > 0) {\n                setCurrentPlayer = currentState.currentPlayer;\n                setActivePiece = coordinates;\n            }\n        }\n\n        let stateOut = {};\n\n        stateOut.boardState = boardState;\n        stateOut.currentPlayer = setCurrentPlayer;\n        stateOut.activePiece = setActivePiece;\n        stateOut.moves = hasJumped === true ? newMoves[0] : [];\n        stateOut.jumpKills = hasJumped === true ? newMoves[1] : null;\n        stateOut.hasJumped = hasJumped === true ? player : null;\n        stateOut.winner = this.evaluateWinner(boardState);\n\n        return stateOut;\n    }\n\n    shouldKing(movingPiece, coordinates) {\n\n        if (movingPiece.isKing === true) {\n            return false;\n        }\n\n        const row = utils.getRowAsInt(coordinates);\n        const player = movingPiece.player;\n\n        return ( (row === 1 && player === 'player1') || (row === 8 && player === 'player2') );\n    }\n\n    evaluateWinner(boardState) {\n\n        let player1Pieces = 0;\n        let player1Moves  = 0;\n\n        let player2Pieces = 0;\n        let player2Moves  = 0;\n\n        for (let coordinates in boardState) {\n            if (!boardState.hasOwnProperty(coordinates) || boardState[coordinates] === null) {\n                continue;\n            }\n\n            const movesData = this.getMoves(boardState, coordinates, boardState[coordinates].isKing, false);\n            const moveCount = movesData[0].length;\n\n            if (boardState[coordinates].player === 'player1') {\n                ++player1Pieces;\n                player1Moves += moveCount;\n\n            } else {\n                ++player2Pieces;\n                player2Moves += moveCount;\n            }\n        }\n\n        if (player1Pieces === 0 ) {\n            return 'player2pieces';\n        }\n\n        if (player2Pieces === 0 ) {\n            return 'player1pieces';\n        }\n\n        if (player1Moves === 0) {\n            return 'player2moves';\n        }\n\n        if (player2Moves === 0) {\n            return 'player1moves';\n        }\n\n        return null;\n    }\n}","import React from 'react';\nimport * as utils from '../utils.js';\nimport Tilt from 'react-tilt';\n\nfunction Square(props) {\n\n    const squareClasses = props['squareClasses'];\n    const onClick = props['onClick'];\n\n    return (\n        <button className = { \"square \" + (squareClasses) } onClick={onClick} />\n    );\n}\n\nexport default class Board extends React.Component {\n\n\n    renderSquare(coordinates, squareClasses) {\n        return (\n\n            <Tilt className=\"Tilt \" options={{ scale: 1.1, max: 55 }}  key = {coordinates}  >\n                 <Square\n                key = {coordinates}\n                squareClasses = {squareClasses}\n                onClick = {() => this.props.onClick(coordinates) }\n            />\n        </Tilt>\n            \n           \n        );\n    }\n\n    render() {\n        let boardRender = [];\n        let columnsRender = [];\n\n        const moves = this.props.moves;\n\n        for (let coordinates in this.props.boardState) {\n\n            if (!this.props.boardState.hasOwnProperty(coordinates)) {\n                continue;\n            }\n\n            const col = utils.getColAsInt(this.props.columns, coordinates);\n            const row = utils.getRowAsInt(coordinates);\n\n            const currentPlayer = utils.returnPlayerName(this.props.currentPlayer);\n\n            const colorClass  = ( (utils.isOdd(col) && utils.isOdd(row)) || (!utils.isOdd(col) && !(utils.isOdd(row)) ) ) ? 'white' : 'black';\n\n            let squareClasses = [];\n\n            squareClasses.push(coordinates);\n            squareClasses.push(colorClass);\n\n            if (this.props.activePiece === coordinates) {\n                squareClasses.push('isActive');\n            }\n\n            if (moves.indexOf(coordinates) > -1) {\n                let moveClass = 'movable ' + currentPlayer + '-move';\n                squareClasses.push(moveClass);\n            }\n\n            if (this.props.boardState[coordinates] !== null) {\n                squareClasses.push(this.props.boardState[coordinates].player + ' piece');\n\n                if (this.props.boardState[coordinates].isKing === true ) {\n                    squareClasses.push('king');\n                }\n            }\n\n            squareClasses = squareClasses.join(' ');\n\n            columnsRender.push(this.renderSquare(coordinates, squareClasses, this.props.boardState[coordinates]));\n\n            if (columnsRender.length >= 8) {\n                columnsRender = columnsRender.reverse();\n                boardRender.push(<div key={boardRender.length} className=\"board-col\">{columnsRender}</div>);\n                columnsRender = [];\n            }\n        }\n\n        return (boardRender);\n    }\n}","import {ReactCheckers} from './ReactCheckers.js';\n\nexport class Opponent extends ReactCheckers {\n\n    getComputerMoves(boardState, player) {\n        const self = this;\n        let computerMoves = {};\n\n        for (const coordinates in boardState) {\n            if (!boardState.hasOwnProperty(coordinates)) {\n                continue;\n            }\n\n            const currentSquare = boardState[coordinates];\n\n            if (currentSquare == null) {\n                continue;\n            }\n\n            if (currentSquare.player !== player) {\n                continue;\n            }\n\n            const pieceMoves = self.getMoves(boardState, coordinates, boardState[coordinates].isKing, false);\n\n            if (pieceMoves[0].length > 0 || pieceMoves[1] !== null) {\n                computerMoves[coordinates] = pieceMoves;\n            }\n        }\n\n        return computerMoves;\n    }\n\n    getSmartMove(state, boardState, player) {\n        const computerMoves = this.getComputerMoves(boardState, player);\n\n        const moveKeys = Object.keys(computerMoves);\n\n        const superMoves = {};\n\n        // Pieces\n        for (let m = 0; m < moveKeys.length ; ++m) {\n            const piece = moveKeys[m];\n\n            const movesData = computerMoves[piece][0];\n            const jumpKills = computerMoves[piece][1];\n\n            const jumpMoves = [];\n\n            for (const jumpCoordinates in jumpKills) {\n                if (!jumpKills.hasOwnProperty(jumpCoordinates)) {\n                    continue;\n                }\n                jumpMoves.push(jumpKills[jumpCoordinates]);\n            }\n\n            let highestScore = 0;\n            let bestMove = null;\n\n            // Piece moves\n            for (let a = 0; a < movesData.length ; ++a) {\n\n                const moveTo = movesData[a];\n\n                let score = 0;\n\n                // let boardStateLeaf = Object.assign({}, boardstate);\n                let stateLeaf = Object.assign({}, state);\n\n                stateLeaf.activePiece = piece;\n                stateLeaf.moves = movesData;\n                stateLeaf.jumpKills = jumpKills;\n\n                if (jumpMoves.indexOf(moveTo) > -1) {\n                    score += 10;\n                }\n\n                while (stateLeaf.currentPlayer === false) {\n\n                    const newJumpMoves = this.getMoves(stateLeaf, stateLeaf.activePiece, stateLeaf.activePiece.isKing, true);\n\n                    stateLeaf.moves = newJumpMoves[0];\n                    stateLeaf.jumpKills = newJumpMoves[1];\n\n                    score += 10;\n                }\n\n                if (score >= highestScore) {\n                    highestScore = score;\n                    bestMove = moveTo;\n                }\n            }\n\n            superMoves[piece] = [bestMove, highestScore];\n        }\n\n        let finalMove = [];\n        let highestAllMoves = 0;\n\n        for (let pieces in superMoves) {\n            if (!superMoves.hasOwnProperty(pieces)) {\n                continue;\n            }\n\n            const pieceMove = superMoves[pieces][0];\n            const moveScore = superMoves[pieces][1];\n\n            if (moveScore >= highestAllMoves) {\n                if (moveScore === highestAllMoves) {\n                    finalMove.push([pieces, pieceMove]);\n                }\n                if (moveScore > highestAllMoves) {\n                    finalMove = [];\n                    finalMove.push([pieces, pieceMove]);\n                    highestAllMoves = moveScore;\n                }\n            }\n        }\n\n        const chooseMove = finalMove[Math.floor(Math.random()*finalMove.length)];\n\n        const out = {};\n        out.piece = chooseMove[0];\n        out.moveTo = chooseMove[1];\n\n        return out;\n    }\n\n    getRandomMove(boardState, player) {\n        const computerMoves = this.getComputerMoves(boardState, player);\n        const keys = Object.keys(computerMoves);\n        const randomPiece = keys[Math.floor(Math.random() * keys.length)];\n\n        const movesData    = computerMoves[randomPiece][0];\n        const randomMoveTo = movesData[Math.floor(Math.random()*movesData.length)];\n\n        let out = {};\n        out.piece = randomPiece;\n        out.moveTo = randomMoveTo;\n\n        return out;\n    }\n}","import React from 'react';\nimport { returnPlayerName } from '../utils.js';\nimport { ReactCheckers } from '../components/ReactCheckers';\nimport Board from '../components/Board';\nimport { Router } from 'react-router-dom'\nimport createBrowserHistory from 'history/createBrowserHistory'\nimport { Opponent } from '../components/Opponent';\nimport Particles from 'react-particles-js';\nimport Tilt from 'react-tilt';\n\nimport './Game.css';\n\n\nconst browserHistory = createBrowserHistory();\n\n\nconst particlesOptions = {\n\n    particles: {\n        number: {\n            value: 60,\n            density: {\n                enable: true,\n                value_area: 500\n            }\n        }\n    }\n}\n\n\nexport class Game extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.columns = this.setColumns();\n\n        this.ReactCheckers = new ReactCheckers(this.columns);\n        this.Opponent = new Opponent(this.columns);\n\n        this.state = {\n            players: null,\n            history: [{\n                boardState: this.createBoard(),\n                currentPlayer: true,\n            }],\n            future: [],\n            activePiece: null,\n            moves: [],\n            jumpKills: null,\n            hasJumped: null,\n            stepNumber: 0,\n            winner: null,\n        }\n    }\n\n\n\n\n    setColumns() {\n        const columns = {};\n        columns.a = 0;\n        columns.b = 1;\n        columns.c = 2;\n        columns.d = 3;\n        columns.e = 4;\n        columns.f = 5;\n        columns.g = 6;\n        columns.h = 7;\n\n        return columns;\n    }\n\n    createBoard() {\n\n        let board = {};\n\n        for (let key in this.columns) {\n\n            if (this.columns.hasOwnProperty(key)) {\n                for (let n = 1; n <= 8; ++n) {\n\n                    let row = key + n;\n                    board[row] = null;\n                }\n            }\n        }\n\n        board = this.initPlayers(board);\n\n        return board;\n    }\n\n    initPlayers(board) {\n        const player1 = ['a8', 'c8', 'e8', 'g8', 'b7', 'd7', 'f7', 'h7', 'a6', 'c6', 'e6', 'g6',];\n        const player2 = ['b3', 'd3', 'f3', 'h3', 'a2', 'c2', 'e2', 'g2', 'b1', 'd1', 'f1', 'h1',];\n\n        let self = this;\n\n        player1.forEach(function (i) {\n            board[i] = self.createPiece(i, 'player1');\n        });\n\n        player2.forEach(function (i) {\n            board[i] = self.createPiece(i, 'player2');\n        });\n\n        return board;\n    }\n\n    createPiece(location, player) {\n        let piece = {};\n\n        piece.player = player;\n        piece.location = location;\n        piece.isKing = false;\n\n        return piece;\n    }\n\n    getCurrentState() {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        return history[history.length - 1];\n    }\n\n    handleClick(coordinates) {\n\n        if (this.state.winner !== null) {\n            return;\n        }\n\n        const currentState = this.getCurrentState();\n        const boardState = currentState.boardState;\n        const clickedSquare = boardState[coordinates];\n\n        // Clicked on a piece\n        if (clickedSquare !== null) {\n\n            // Can't select opponents pieces\n            if (clickedSquare.player !== returnPlayerName(currentState.currentPlayer)) {\n                return;\n            }\n\n            // Unset active piece if it's clicked\n            if (this.state.activePiece === coordinates && this.state.hasJumped === null) {\n                this.setState({\n                    activePiece: null,\n                    moves: [],\n                    jumpKills: null,\n                });\n                return;\n            }\n\n            // Can't choose a new piece if player has already jumped.\n            if (this.state.hasJumped !== null && boardState[coordinates] !== null) {\n                return;\n            }\n\n            // Set active piece\n            let movesData = this.ReactCheckers.getMoves(boardState, coordinates, clickedSquare.isKing, false);\n\n            this.setState({\n                activePiece: coordinates,\n                moves: movesData[0],\n                jumpKills: movesData[1],\n            });\n\n            return;\n        }\n\n        // Clicked on an empty square\n        if (this.state.activePiece === null) {\n            return;\n        }\n\n        // Moving a piece\n        if (this.state.moves.length > 0) {\n            const postMoveState = this.ReactCheckers.movePiece(coordinates, this.state);\n\n            if (postMoveState === null) {\n                return;\n            }\n\n            this.updateStatePostMove(postMoveState);\n\n            // Start computer move is the player is finished\n            if (postMoveState.currentPlayer === false && postMoveState.winner === null) {\n                this.computerTurn();\n            }\n        }\n    }\n\n    computerTurn(piece = null) {\n        if (this.state.players > 1) {\n            return;\n        }\n\n        setTimeout(() => {\n            const currentState = this.getCurrentState();\n            const boardState = currentState.boardState;\n\n            let computerMove;\n            let coordinates;\n            let moveTo;\n\n            // If var piece != null, the piece has previously jumped.\n            if (piece === null) {\n                //computerMove = this.Opponent.getRandomMove(boardState, 'player2');\n                computerMove = this.Opponent.getSmartMove(this.state, boardState, 'player2');\n\n                coordinates = computerMove.piece;\n                moveTo = computerMove.moveTo;\n            } else {\n                // Prevent the computer player from choosing another piece to move. It must move the active piece\n                computerMove = this.ReactCheckers.getMoves(boardState, piece, boardState[piece].isKing, true);\n                coordinates = piece;\n                moveTo = computerMove[0][Math.floor(Math.random() * computerMove[0].length)];\n            }\n\n            const clickedSquare = boardState[coordinates];\n\n            let movesData = this.ReactCheckers.getMoves(boardState, coordinates, clickedSquare.isKing, false);\n\n            this.setState({\n                activePiece: coordinates,\n                moves: movesData[0],\n                jumpKills: movesData[1],\n            });\n\n            setTimeout(() => {\n                const postMoveState = this.ReactCheckers.movePiece(moveTo, this.state);\n\n                if (postMoveState === null) {\n                    return;\n                }\n\n                this.updateStatePostMove(postMoveState);\n\n                // If the computer player has jumped and is still moving, continue jump with active piece\n                if (postMoveState.currentPlayer === false) {\n                    this.computerTurn(postMoveState.activePiece);\n                }\n            },\n                500);\n        },\n            1000);\n    }\n\n    updateStatePostMove(postMoveState) {\n        this.setState({\n            history: this.state.history.concat([{\n                boardState: postMoveState.boardState,\n                currentPlayer: postMoveState.currentPlayer,\n            }]),\n            activePiece: postMoveState.activePiece,\n            future: [],\n            moves: postMoveState.moves,\n            jumpKills: postMoveState.jumpKills,\n            hasJumped: postMoveState.hasJumped,\n            stepNumber: this.state.history.length,\n            winner: postMoveState.winner,\n        });\n    }\n\n    undo() {\n        const backStep = parseInt(this.state.stepNumber, 10) - 1;\n        if (backStep < 0) {\n            return;\n        }\n        const futureMoves = this.state.future.slice();\n        futureMoves.push(this.getCurrentState());\n\n\n\n        const unsetHistory = this.state.history.slice(0, backStep + 1);\n        this.setState({\n            history: unsetHistory,\n            activePiece: null,\n            future: futureMoves,\n            moves: [],\n            jumpKills: null,\n            hasJumped: null,\n            stepNumber: backStep,\n            winner: null,\n        });\n    }\n\n    redo() {\n\n\n\n        const futureMoves = this.state.future.slice();\n        if (futureMoves.length < 1) {\n            return;\n        }\n        const move = futureMoves[futureMoves.length - 1];\n        futureMoves.pop();\n        const his = this.state.history.slice();\n        his.push(move);\n\n        this.setState({\n            history: his,\n            activePiece: null,\n            future: futureMoves,\n            moves: [],\n            jumpKills: null,\n            hasJumped: null,\n            stepNumber: this.state.history.length,\n            winner: null,\n        });\n\n\n    }\n\n    mainMenu() {\n        this.setState({\n            players: null,\n            history: [{\n                boardState: this.createBoard(),\n                currentPlayer: true,\n            }],\n            activePiece: null,\n            moves: [],\n            jumpKills: null,\n            hasJumped: null,\n            stepNumber: 0,\n            winner: null,\n        });\n    }\n    reset() {\n        this.setState({\n\n            history: [{\n                boardState: this.createBoard(),\n                currentPlayer: true,\n            }],\n            activePiece: null,\n            moves: [],\n            jumpKills: null,\n            hasJumped: null,\n            stepNumber: 0,\n            winner: null,\n        });\n    }\n\n    setPlayers(players) {\n        this.setState({\n            players: players,\n        })\n    }\n\n    render() {\n        const columns = this.columns;\n        const stateHistory = this.state.history;\n        const activePiece = this.state.activePiece;\n        const currentState = stateHistory[this.state.stepNumber];\n        const boardState = currentState.boardState;\n        const currentPlayer = currentState.currentPlayer;\n        const moves = this.state.moves;\n\n        //        console.log(this.state);\n\n        let gameStatus;\n\n        let undoClass = 'undo';\n        let redoClass = 'undo';\n\n        if (this.state.stepNumber < 1) {\n            undoClass += ' disabled ';\n           \n\n        }\n         if(this.state.future.length <1) {\n            redoClass += ' disabled ';\n        }\n        // if(this.state.future.length === []){\n        //     redoClass += ' disabled';\n\n        // }\n\n        switch (this.state.winner) {\n            case 'player1pieces':\n                gameStatus = 'Player One Wins!';\n                break;\n            case 'player2pieces':\n                gameStatus = 'Player Two Wins!';\n                break;\n            case 'player1moves':\n                gameStatus = 'No moves left - Player One Wins!';\n                break;\n            case 'player2moves':\n                gameStatus = 'No moves left - Player Two Wins!';\n                break;\n            default:\n                gameStatus = currentState.currentPlayer === true ? 'Player One' : 'Player Two';\n                break;\n        }\n\n        if (this.state.players === null) {\n            return (\n                <div className=\"App\">\n                    <Particles className='particles'\n                        params={particlesOptions} />\n\n                    <Router history={browserHistory} basename={'react-checkers'} >\n\n                        <div className=\"players-select\">\n                            <h1 className=\"robo shadowH1\">Checkers</h1>\n                            <h2 className=\"robo shadowH2\"> {\" Game    Mode\"}</h2>\n                            <div className=\"players\">\n                                <div className=\"one-player cta-btn cta-btn--hero\" onClick={() => this.setPlayers(1)}>Single     Player</div>\n\n\n                            </div>\n                            <div className=\"players\">\n                                <div className=\"two-player cta-btn cta-btn--hero\" onClick={() => this.setPlayers(2)}>Two    Players</div>\n\n                            </div>\n                        </div>\n                    </Router>\n                </div>\n\n            )\n        }\n\n        return (\n\n            <div className=\"App\">\n                <Particles className='particles'\n                    params={particlesOptions} />\n                <Router history={browserHistory} basename={'react-checkers'} >\n                    <div className=\"reactCheckers\">\n                        <div className=\"game-status robo\">\n                            {gameStatus}\n                        </div>\n                        <div className=\"game-board\">\n                            <Board\n                                boardState={boardState}\n                                currentPlayer={currentPlayer}\n                                activePiece={activePiece}\n                                moves={moves}\n                                columns={columns}\n                                onClick={(coordinates) => this.handleClick(coordinates)}\n                            />\n                        </div>\n                        <div className=\"time-travel \">\n                            <Tilt className=\"Tilt \" options={{ scale: 1.1, max: 20 }}  >\n                                <button className=\"main-menu robo\" onClick={() => this.mainMenu()}>Main Menu</button>\n                                <button className={undoClass + \" robo\"} onClick={() => this.reset()}>Reset</button>\n                                <button className={undoClass + \" robo\"} onClick={() => this.undo()}>Undo</button>\n                                <button className={redoClass + \" robo\"} onClick={() => this.redo()}>Redo</button>\n                            </Tilt>\n\n\n                        </div>\n                    </div>\n                </Router>\n            </div>\n\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Game} from './containers/Game';\n\n\n// ========================================\n\nReactDOM.render(\n    \n    <Game />,\n    document.getElementById('root')\n);"],"sourceRoot":""}